<?xml version="1.0"  encoding="ISO-8859-1"?>
    <!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://jetty.mortbay.org/configure.dtd">
    
    <Configure class="org.mortbay.jetty.webapp.WebAppContext">
    <!-- 
    
    Pour déploiement sous Jetty :
    
    Stocker ce fichier sous JETTY_HOME/contexts et placer le war (web-corpus.war) sous JETTY_HOME/webapps 
    
    
    -->    
        <Set name="contextPath">/corpus</Set>
        <Set name="war"><SystemProperty name="jetty.home" default="."/>/webapps/web-corpus.war</Set>
        
        <New id="CorpusDataSource" class="org.mortbay.jetty.plus.naming.Resource">
            <!--  You need to specify resource-ref="true" or prepend "java:comp/env/" (as you did) to make such a JNDI lookup work according to J2EE environment naming conventions. -->
            <Arg>jdbc/corpus</Arg>
            <Arg>
                <New class="org.apache.commons.dbcp.BasicDataSource">
                    <Set name="driverClassName">com.mysql.jdbc.Driver</Set>
                    <Set name="url">jdbc:mysql://infra.srv.franqus.ca:3306/corpus?autoReconnect=true</Set>
                    <Set name="username">corpus</Set>
                    <Set name="password">corpus</Set>
                    <Set name="InitialSize">5</Set>
                    <Set name="MaxActive">10</Set>
                    <!-- 
                        Q: What if the pooled Connections are com.mysql.jdbc.Connection instances
                        This works perfectly well if you are using a GenericObjectPool that has 'testOnBorrow' set. 
                        Connections will be validated at borrow time. Any stale ones will be discarded, 
                        and new ones created in their place.  The MySQL Connector/J Connection allows to set the 
                        parameter 'autoReconnect', but it is useless in this case: 'autoReconnect' just means that 
                        you will get an Exception when you run a query on a stale Connection, 
                        but that you can run the query again and the Connection will try to reconnect on this second try. 
                        As DBCP does not do second tries on the same Connection instance, the 'autoReconnect' case will not arise. 
                    -->
                    <Set name="validationQuery">SELECT 1</Set>
                    <Set name="testOnBorrow">true</Set>
                    <Set name="testOnReturn">false</Set>
                </New>
            </Arg>
        </New>
        
    </Configure>   